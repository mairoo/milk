name: Build frontend for production

on:
  workflow_dispatch:

jobs:
  build:
    if: github.ref == 'refs/heads/main'
    runs-on: [ self-hosted, frontend, Production ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: npm-deps-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-deps-${{ runner.os }}-

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: nextjs-build-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx', '**/*.json') }}
          restore-keys: |
            nextjs-build-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-
            nextjs-build-${{ runner.os }}-

      - name: Copy production config
        run: cp ${{ secrets.CONFIG_PATH }}/dotenv .env.production

      - name: Install dependencies
        run: |
          if [ ! -d "node_modules" ]; then
            echo "Installing dependencies..."
            npm ci --prefer-offline --no-audit
          else
            echo "Using cached dependencies"
          fi

      - name: Build Next.js application
        run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1
          CI: true

      - name: Build Docker image
        run: |
          echo "ðŸ”¨ Building frontend Docker image..."
          DOCKER_BUILDKIT=1 docker build \
            --cache-from ${{ secrets.PREFIX }}-frontend:latest \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            -f Dockerfile.prod \
            -t ${{ secrets.PREFIX }}-frontend:latest .

      - name: Verify Docker image
        run: |
          echo "âœ… Frontend Docker image built successfully"
          docker images ${{ secrets.PREFIX }}-frontend:latest

      - name: Cleanup
        run: rm -f .env.production